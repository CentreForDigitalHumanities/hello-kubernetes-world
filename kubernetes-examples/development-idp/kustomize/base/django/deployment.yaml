apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: django-idp
    app.kubernetes.io/name: django-idp
  name: django-idp
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: django-idp
      app.kubernetes.io/name: django-idp
  replicas: 1
  revisionHistoryLimit: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: django-idp
        app.kubernetes.io/name: django-idp
    spec:

      volumes:
        - name: django-certs
          secret:
            secretName: django-certs

        - name: cache-volume
          emptyDir:
            sizeLimit: 500Mi

      containers:
      - name: idp
        image: ghcr.io/centrefordigitalhumanities/development-idp/development-idp:v2.0.0-alpha-8

        ports:
          - containerPort: 7000
            name: http
            protocol: TCP

        volumeMounts:
          - mountPath: "/certs"
            name: django-certs
            readOnly: true
          - mountPath: /cache
            name: cache-volume

        envFrom:
          - configMapRef:
              name: django-config-map
          - secretRef:
              name: django-secrets

        # This is not present in the 'simple' example for clarity.
        # These 'probes' tell k8s how to check if the container is running and healthy
        # First up is the 'readinessProbe'. This is a probe that tells k8s if the container is ready to accept traffic
        readinessProbe:
          # This is an HTTP probe, which means k8s will make an HTTP request to the container
          httpGet:
            # This is a path that MUST return a 200 status code for the container to be considered healthy
            # We chose the saml metadata, as this url will only work if the container is configured correctly and running
            path: /saml/idp/metadata/
            # We are exposing the container on port 7000, so we need to tell k8s to connect to that port
            port: 7000
            # It's an HTTP endpoint, so we need to tell k8s to use HTTP
            scheme: HTTP
            httpHeaders:
              # Here we set some headers for the 'check' request.
              # By default, k8s will set a 'Host' header that's unpredictable; thus, we override it with 'localhost'
              # (We configured Django to trust the 'localhost' host in the `config-map.yaml`)
              - name: Host
                value: localhost
          # Tell k8s to wait 5 seconds after the container starts before running the probe
          initialDelaySeconds: 5
          # Tell k8s to run the probe every 10 seconds
          periodSeconds: 10
          # Tell k8s to wait 5 seconds for the probe to complete. If it takes longer, k8s will consider the probe failed
          timeoutSeconds: 5
        # next up is the 'livenessProbe'. This is a probe that tells k8s if the container is still running
        # The configuration is the same as the 'readinessProbe'.
        livenessProbe:
          httpGet:
            path: /saml/idp/metadata/
            port: 7000
            scheme: HTTP
            httpHeaders:
              - name: Host
                value: localhost
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5

